name: Build and Test LaTeX PDF Workflow

on:
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Add explicit permissions for testing release and pages functionality
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Read version from version.txt
      id: version
      run: |
        VERSION=$(cat version.txt)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
    
    - name: Compile LaTeX
      uses: ./.github/actions/compile-latex
      with:
        root_file: main.tex
        
    - name: Verify PDF generation and rename with version
      run: |
        if [ -f "main.pdf" ]; then
          echo "✅ PDF generated successfully"
          ls -la main.pdf
          # Rename PDF with version and PR number for test releases
          VERSION="${{ steps.version.outputs.version }}"
          PR_NUMBER="${{ github.event.number }}"
          mv main.pdf "resume-v${VERSION}-pr-${PR_NUMBER}.pdf"
          echo "✅ PDF renamed to resume-v${VERSION}-pr-${PR_NUMBER}.pdf"
          ls -la "resume-v${VERSION}-pr-${PR_NUMBER}.pdf"
        else
          echo "❌ PDF generation failed"
          exit 1
        fi
        
    - name: Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: resume-pdf-pr-${{ github.event.number }}
        path: resume-v${{ steps.version.outputs.version }}-pr-${{ github.event.number }}.pdf
        retention-days: 30

    # TEST: Try release creation in PR (will be draft)
    - name: Test Release Creation
      uses: softprops/action-gh-release@v1
      with:
        tag_name: test-pr-${{ github.event.number }}
        name: Test Release PR-${{ github.event.number }}
        files: resume-v${{ steps.version.outputs.version }}-pr-${{ github.event.number }}.pdf
        draft: true
        prerelease: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # TEST: Prepare deployment directory
    - name: Test GitHub Pages deployment preparation
      run: |
        mkdir -p test-deploy
        VERSION="${{ steps.version.outputs.version }}"
        PR_NUMBER="${{ github.event.number }}"
        LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=short)
        echo "Using version: $VERSION"
        echo "PR number: $PR_NUMBER"
        echo "Last commit date: $LAST_COMMIT_DATE"
        
        # Copy versioned PDF with PR number
        cp "resume-v${VERSION}-pr-${PR_NUMBER}.pdf" test-deploy/
        
        # Copy and update HTML with version and last commit date
        cp index.html test-deploy/
        sed -i "s/{{VERSION}}/$VERSION/g" test-deploy/index.html
        sed -i "s/{{LAST_COMMIT_DATE}}/$LAST_COMMIT_DATE/g" test-deploy/index.html
        # Update PDF link to include PR number for test
        sed -i "s/resume-v${VERSION}.pdf/resume-v${VERSION}-pr-${PR_NUMBER}.pdf/g" test-deploy/index.html
        
        # Do NOT copy .gitignore to avoid blocking PDF access on GitHub Pages
        echo "✅ Test deployment directory prepared"
        ls -la test-deploy/
        echo "✅ Checking HTML content:"
        grep -E "(Version:|Last updated:|href=)" test-deploy/index.html

    # TEST: Try GitHub Pages deployment
    - name: Test GitHub Pages Deployment
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: test-deploy
        destination_dir: test-pr-${{ github.event.number }}
        keep_files: true
        publish_branch: gh-pages
        force_orphan: false
        enable_jekyll: false